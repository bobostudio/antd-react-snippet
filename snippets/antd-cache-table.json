{
  "Antd CACHE Table": {
    "prefix": "act",
    "body": [
      "import type { IPagination, IResponseData } from '@metering-system/components'",
      "import { CustomColumnsType, ProTable, SearchItem } from '@metering-system/components'",
      "import { IQueryFromType } from '@metering-system/components/src/ProTable/ProTableSearch'",
      "import { clearCache, useBoolean, useRequest } from 'ahooks'",
      "import { Button, Modal } from 'antd'",
      "import { useEffect, useMemo, useState } from 'react'",
      "",
      "// 缓存key",
      "const CACHE_KEY = `${1:tableName}`",
      "// 缓存时间(5分钟)",
      "const STALE_TIME = 300000",
      "// 类型定义",
      "type TypeResponse = ${2:any}",
      "",
      "/**",
      " *  TODO 模块注释",
      " */",
      "export default function ${3:PageName}() {",
      "\tconst [dataSource, setDataSource] = useState<TypeResponse[]>([])",
      "\tconst [_editDrawerType, setEditDrawerType] = useState<'add' | 'edit'>('add')",
      "\tconst [_currentRecord, setCurrentRecord] = useState<TypeResponse | null>()",
      "\tconst [_isModalOpen, { setTrue: open, setFalse: close }] = useBoolean(false)",
      "\tconst [pageTotal, setPageTotal] = useState<number>(0)",
      "\t// 获取列表",
      "\tconst {",
      "\t\trun: fetchList,",
      "\t\tdata,",
      "\t\tparams,",
      "\t\tloading",
      "\t} = useRequest(${4:Promise.resolve, {",
      "\t\tmanual: true,",
      "\t\tcacheKey: CACHE_KEY,",
      "\t\tstaleTime: STALE_TIME,",
      "\t\tonSuccess: (res: IResponseData<IPagination<TypeResponse>>) => {",
      "\t\t\tconst { data \\}  = res",
      "\t\t\tsetDataSource(data?.records || [])",
      "\t\t\tsetPageTotal(data?.totalRow ?? 0)\n\t\t\\}",
      "\t\t}",
      "\t})",
      "\t// 设置分页",
      "\tconst [pageInfo, setPageInfo] = useState({",
      "\t\tpageNumber: (params?.[0] as any)?.pageNumber || 1,",
      "\t\tpageSize: (params?.[0] as any)?.pageSize || 20",
      "\t})",
      "",
      "\t// TODO 搜索参数",
      "\tconst [searchParams, setSearchParams] = useState<Partial<TypeResponse>>({})",
      "",
      "\t// 获取列表",
      "\tuseEffect(() => {",
      "\t\tfetchList({ ...searchParams, ...pageInfo })",
      "\t}, [searchParams, pageInfo, fetchList])",
      "",
      "\t// 获取列表依赖",
      "\tuseEffect(() => {",
      "\t\tif (data) {",
      "\t\t\tsetDataSource(data?.data?.records || [])",
      "\t\t\tsetPageTotal(data?.data?.totalRow ?? 0)",
      "\t\t}",
      "\t}, [data])",
      "",
      "\t// 清除缓存",
      "\tconst handleClearCache = () => {",
      "\t\tclearCache(CACHE_KEY)",
      "\t}",
      "",
      "\t// 分页",
      "\tconst handlePagination = (page: number, pageSize: number) => {",
      "\t\thandleClearCache()",
      "\t\tsetPageInfo({ pageNumber: page, pageSize })",
      "\t}",
      "",
      "\t// 搜索",
      "\tconst handleSearch = (params: Partial<TypeResponse> & IQueryFromType) => {",
      "\t\thandleClearCache()",
      "\t\tsetSearchParams(params)",
      "\t\tsetPageInfo({ ...pageInfo, pageNumber: 1 })",
      "\t}",
      "",
      "\t// 重置",
      "\tconst handleReset = () => {",
      "\t\thandleClearCache()",
      "\t\tsetSearchParams({ clientName: '' })",
      "\t\tsetPageInfo({ pageNumber: 1, pageSize: 20 })",
      "\t}",
      "",
      "\t// 刷新列表",
      "\tconst handleRefresh = () => {",
      "\t\thandleClearCache()",
      "\t\tfetchList({ ...searchParams, ...pageInfo })",
      "\t}",
      "",
      "\t// 编辑",
      "\tconst handleEdit = (record: TypeResponse) => {",
      "\t\tsetCurrentRecord(record)",
      "\t\tsetEditDrawerType('edit')",
      "\t\topen()",
      "\t}",
      "\t// 新增",
      "\tconst handleAdd = () => {",
      "\t\tsetCurrentRecord(null)",
      "\t\tsetEditDrawerType('add')",
      "\t\topen()",
      "\t}",
      "",
      "\t// 启动/禁用",
      "\tconst handleEnableOrDisable = async (record: TypeResponse) => {",
      "\t\tModal.confirm({",
      "\t\t\ttitle: '提示',",
      "\t\t\tcontent: ``,",
      "\t\t\tonOk: async () => {",
      "\t\t\t\t// TODO 启动/禁用逻辑",
      "\t\t\t\tconsole.log(`record:`, record)",
      "\t\t\t\tclose()",
      "\t\t\t\thandleRefresh()",
      "\t\t\t}",
      "\t\t})",
      "\t}",
      "",
      "\t// 表格列",
      "\tconst columns = useMemo<CustomColumnsType<TypeResponse>>(",
      "\t\t() => [",
      "\t\t\t// TODO 列配置",
      "\t\t],",
      "\t\t[handleEdit, handleEnableOrDisable]",
      "\t)",
      "",
      "\t// 搜索配置",
      "\tconst searchConfig = useMemo<Array<SearchItem>>(",
      "\t\t() => [",
      "\t\t\t// TODO 搜索配置",
      "\t\t],",
      "\t\t[]",
      "\t)",
      "",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<ProTable<TypeResponse>",
      "\t\t\t\tloading={loading}",
      "\t\t\t\trowKey='id'",
      "\t\t\t\tcolumns={columns}",
      "\t\t\t\tdataSource={dataSource}",
      "\t\t\t\tsearch={{",
      "\t\t\t\t\tinitialValues: searchParams,",
      "\t\t\t\t\tsearchConfig,",
      "\t\t\t\t\tonFinish: handleSearch,",
      "\t\t\t\t\tonReset: handleReset",
      "\t\t\t\t}}",
      "\t\t\t\tpaginationSetting={{",
      "\t\t\t\t\ttotal: pageTotal,",
      "\t\t\t\t\tcurrentPage: pageInfo.pageNumber,",
      "\t\t\t\t\tcurrentPageSize: pageInfo.pageSize,",
      "\t\t\t\t\tonChange: handlePagination",
      "\t\t\t\t}}",
      "\t\t\t\tbtnGroup={\n\t\t\t\t\t<Button type='primary' onClick={handleAdd}>\n\t\t\t\t\t\t新增\n\t\t\t\t\t</Button>\n\t\t\t\t}",
      "\t\t\t\tisShowRowSelection={false}",
      "\t\t\t\tsetting={false}",
      "\t\t\t/>",
      "\t\t\t{/* 新增/编辑弹窗 */}",
      "\t\t\t{/*{isModalOpen && (",
      "\t\t\t\t// TODO",
      "\t\t\t\t<${5:EditDrawerName}",
      "\t\t\t\t\topen={isModalOpen}",
      "\t\t\t\t\tonClose={close}",
      "\t\t\t\t\ttype={editDrawerType}",
      "\t\t\t\t\trecord={currentRecord}",
      "\t\t\t\t\trefresh={handleRefresh}",
      "\t\t\t\t/>",
      "\t\t\t)}*/}",
      "\t\t</>",
      "\t)",
      "}"
    ],
    "description": "Antd 缓存列表模板"
  }
}
